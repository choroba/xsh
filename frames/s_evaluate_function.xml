<?xml version="1.0" encoding="utf-8"?>
<section id="evaluate_function">
  <title>xsh:evaluate function</title>
  <simplesect role="usage" id="gen-000">
    <title>Usage</title>
    <para>
      <literal>node-set xsh:evaluate(string XPATH)</literal>
    </para>
  </simplesect>
  <simplesect role="description" id="gen-001"><title>Description</title>
	  <para>
	    This function is very similar to EXSLT
	    <literal>dynamic:evaluate</literal> function.  The description
	    below is almost literally taken from the <ulink url="http://www.exslt.org/dyn/functions/map/index.html">EXSLT
	    specification</ulink>.
	  </para>
	  <para>
	    The <literal>xsh:evaluate</literal> function evaluates a string as an XPath expression
	    and returns the resulting value, which might be a boolean, number,
	    string, node set, result tree fragment or external object. The sole
	    argument is the string to be evaluated. 
	  </para>
	  <para>
	    The string is always evaluated exactly as if it had been literally
	    included in place of the call to the <literal>xsh:evaluate</literal> function.
	  </para>
	  <para>
	    In other words, the context information used when evaluating the
	    XPath expression passed as the argument to the <literal>xsh:evaluate</literal>
	    function is exactly the same as the context information used when
	    evaluating the <literal>xsh:evaluate</literal> function. This context information
	    includes: 
	  </para>
	  <orderedlist>
	    <listitem>
	      <para>
		the context node, such that paths are evaluated relative to the
		context node at the point where the <literal>xsh:evaluate</literal> function is
		called
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		the context position, such that the expression can contain
		calls to the position function
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		the context size, such that the expression can contain calls to
		the last function
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		variable bindings, such that the expression can contain
		variable references
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		function library, such that the expression can contain calls to
		extension functions
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		namespace declarations, such that paths can contain prefixes
		the current node, such that the expression can contain calls to
		the current function
	      </para>
	    </listitem>
	  </orderedlist>
	  <para>
	    If the expression string passed as the second argument is an
	    invalid XPath expression (including an empty string), this function
	    returns an empty node set. 
	  </para>
	  <para>
	    You should only use this function if the expression must be
	    constructed dynamically - otherwise it is much more efficient to
	    use the expression literally. For expressions that simply give an
	    element or attribute's name (to select a child element or
	    attribute), it is more efficient to use an expression 
	    in the style: 
	  </para>
	  <programlisting>*[name() = $expression]</programlisting>	      
	</simplesect>
  <simplesect role="seealso" id="gen-002">
    <title>See Also</title>
    <para>
      <ulink url="s_map_function.html">xsh:map</ulink>
    </para>
  </simplesect>
</section>
